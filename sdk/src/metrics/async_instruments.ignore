#include "opentelemetry/api/metrics/instrument.h"
#include "opentelemetry/sdk/metrics/aggregator.h"
#include "opentelemetry/version.h"
#include "instrument.cc"
#include <memory>


OPENTELEMETRY_BEGIN_NAMESPACE
namespace metrics
{

class IntValueObserver : public AsynchronousInstrument
{

public:
  IntValueObserver() = default;

  IntValueObserver(nostd::string_view name,
                   nostd::string_view description,
                   nostd::string_view unit,
                   bool enabled,
                   void (*callback)(ObserverResult)):
                   AsynchronousInstrument(name,description,unit,enabled,callback)
  {}

  /*
   * Updates the instruments aggregator with the new value. The labels should
   * contain the keys and values to be associated with this value.
   *
   * @param value is the numerical representation of the metric being captured
   * @param labels the set of labels, as key-value pairs
   */
  virtual void observe(int value, const trace::KeyValueIterable &labels) {
      if (boundAggregators_.find(labels) == boundInstruments_.end()){
          auto newAgg = unique_ptr<Aggregator>(new MinMaxAggregator());
          newAgg->update(value);
          boundAggregators_[labels] = std::move(newAgg);
      } else {
          boundAggregators_[labels]->update(value);
      }
  }
};